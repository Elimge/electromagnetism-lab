// src/lib/physics/biotSavart.ts
import * as THREE from "three";

// Physical constant: Vacuum permeability (μ₀) divided by 2π.
// // μ₀ = 4π * 10⁻⁷, so (μ₀ / 2π) = 2 * 10⁻⁷
const MU0_OVER_2PI = 2e-7; 

/**
* Calculates the magnetic field vector (B) at a point in space
* generated by a current (I) in an infinite straight wire along the Y axis.
* @param current - The current in Amps (can be positive or negative).
* @param measurementPosition - The position (x, y, z) where the field is measured.
* @returns A THREE.Vector3 representing the magnetic field B.
*/
export function calculateBField(current: number, measurementPosition: THREE.Vector3): THREE.Vector3 {
    // 1. Calculate the perpendicular distance (r) beetween the cable (axis Y) and the point. 
    // The cable is in (0, y, 0), so, the distance in the XZ plane is sqrt(x² + z²)
    const r = Math.sqrt(measurementPosition.x ** 2 + measurementPosition.z ** 2); 

    // if we are in the center of the cable, the B is infinite.
    // To avoid a ZeroDivision error, return a zero vector 
    if (r === 0) {
        return new THREE.Vector3(0, 0, 0);
    }

    // Calculate the magnitude of the magnetic field using the formula.
    const bMagnitude = (MU0_OVER_2PI * current) / r;

    // 3. Determine the direction of the field using the right-hand rule.
    // The magnetic field forms circles around the wire in the XZ plane.
    // The direction vector is always perpendicular to the radial position vector (x, 0, z).
    // If the radial vector is (x, 0, z), the tangential vector is (-z, 0, x) or (z, 0, -x).
    // For a positive current (upward, +Y), the correct direction is (z, 0, -x).
    const bDirection = new THREE.Vector3(measurementPosition.z, 0, -measurementPosition.x).normalize();
    
    // Combine magnitude and direction to obtain the final field vector.
    const bFieldVector = bDirection.multiplyScalar(bMagnitude);

    return bFieldVector; 
}
